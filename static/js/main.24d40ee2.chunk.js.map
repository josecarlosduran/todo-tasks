{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","components/HeaderBar.jsx","App.jsx","index.js"],"names":["TodoItem","todo","toggleTodo","id","task","completed","type","checked","onChange","TodoList","todos","map","HeaderBar","className","LOCAL_STORAGE_KEY","App","useState","setTodos","todoTaskRef","useRef","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","newTodos","find","ref","placeholder","onClick","current","value","prevTodos","uuidV4","filter","remainingTasks","length","remainingTasksText","ReactDOM","render","document","getElementById"],"mappings":"2LAEO,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,WACrBC,EAAuBF,EAAvBE,GAAIC,EAAmBH,EAAnBG,KAAMC,EAAaJ,EAAbI,UAKjB,OACI,+BACI,uBAAOC,KAAK,WAAWC,QAASF,EAAWG,SAL3B,WACpBN,EAAWC,MAKNC,KCRN,SAASK,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAOR,EAAc,EAAdA,WAC9B,OACG,6BACKQ,EAAMC,KAAI,SAACV,GAAD,OACP,cAACD,EAAD,CAAwBC,KAAQA,EAAMC,WAAYA,GAAnCD,EAAKE,SCL5B,SAASS,IACZ,OACI,qBAAKC,UAAU,aAAf,SACI,8C,YCENC,G,MAAoB,sBAEnB,SAASC,IAAM,IAAD,EACSC,mBAAS,IADlB,mBACVN,EADU,KACHO,EADG,KAGXC,EAAcC,mBAEpBC,qBAAU,WACF,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQX,IAChDO,GACAJ,EAASI,KAGjB,IAEJD,qBAAU,WACNI,aAAaE,QAAQZ,EAAmBQ,KAAKK,UAAUjB,MAEvD,CAACA,IAuCL,OACI,qCACI,cAACE,EAAD,IACA,cAACH,EAAD,CAAUC,MAAOA,EAAOR,WAxCb,SAACC,GAChB,IAAMyB,EAAQ,YAAOlB,GACfT,EAAO2B,EAASC,MAAM,SAAC5B,GAAD,OAAUA,EAAKE,KAAOA,KAClDF,EAAKI,WAAaJ,EAAKI,UACvBY,EAASW,MAqCL,uBAAOE,IAAKZ,EAAaZ,KAAK,OAAOyB,YAAY,gBACjD,wBAAQC,QAnCM,WAClB,IAAM5B,EAAOc,EAAYe,QAAQC,MACpB,KAAT9B,IAEJa,GAAS,SAACkB,GACN,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAAChC,GAAIiC,cAAUhC,OAAMC,WAAW,QAG1Da,EAAYe,QAAQC,MAAQ,OA2BxB,oBACA,wBAAQF,QAxBO,WACnB,IAAMJ,EAAUlB,EAAM2B,QAAO,SAACpC,GAAD,OAAWA,EAAKI,aAC7CY,EAASW,IAsBL,0BAlBmB,WACvB,IAAMU,EAAiB5B,EAAM2B,QAAO,SAACpC,GAAD,OAAUA,EAAKI,aAAWkC,OAC9D,OAAuB,IAAnBD,EACQ,GAGR,6CACeA,EADf,0BAaCE,MCnEbC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.24d40ee2.chunk.js","sourcesContent":["import React from 'react';\n\nexport function TodoItem({todo, toggleTodo}) {\n    const {id, task, completed} = todo\n\n    const handleTodoClick = () => {\n        toggleTodo(id)\n    }\n    return (\n        <li>\n            <input type=\"checkbox\" checked={completed} onChange={handleTodoClick}/>\n            {task}\n        </li>\n    );\n}\n\n","import React from 'react';\nimport { TodoItem } from \"./TodoItem\";\n\nexport function TodoList({ todos, toggleTodo }) {\n    return (\n       <ul>\n           {todos.map((todo) => (\n               <TodoItem key={todo.id} todo = {todo} toggleTodo={toggleTodo}/>\n           ))}\n       </ul>\n    );\n}\n\n","import React from 'react';\n\nexport function HeaderBar() {\n    return (\n        <div className=\"header-bar\">\n            <h1>Todo Tasks</h1>\n        </div>\n    );\n}\n\n","import React, { useState, useRef, useEffect } from 'react';\nimport { TodoList } from './components/TodoList'\nimport { HeaderBar} from \"./components/HeaderBar\";\nimport { v4 as uuidV4 } from 'uuid'\n\nimport './styles/App.scss'\n\nconst LOCAL_STORAGE_KEY = \"todoTasksApp.todos\"\n\nexport function App(){\n    const [todos, setTodos] = useState([]);\n\n    const todoTaskRef = useRef()\n\n    useEffect(() =>{\n            const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n            if (storedTodos) {\n                setTodos(storedTodos)\n            }\n        },\n        []);\n\n    useEffect(() => {\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n        },\n        [todos]);\n\n    const toggleTodo = (id) => {\n        const newTodos = [...todos];\n        const todo = newTodos.find ((todo) => todo.id === id);\n        todo.completed = !todo.completed;\n        setTodos(newTodos);\n    }\n\n    const handleTodoAdd = () =>{\n        const task = todoTaskRef.current.value;\n        if (task === '') return;\n\n        setTodos((prevTodos) => {\n            return [...prevTodos, {id: uuidV4(), task, completed: false}]\n        })\n\n        todoTaskRef.current.value = null\n\n    };\n\n    const handleClearAll = () => {\n        const newTodos =todos.filter((todo) => !todo.completed);\n        setTodos(newTodos);\n    }\n\n\n    const remainingTasksText = () => {\n        const remainingTasks = todos.filter((todo) =>!todo.completed).length;\n        if (remainingTasks === 0 ){\n            return ('');\n        }\n        return (\n            <div>\n                Te quedan {remainingTasks} tareas por terminar\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <HeaderBar />\n            <TodoList todos={todos} toggleTodo={toggleTodo} />\n            <input ref={todoTaskRef} type=\"text\" placeholder=\"Nueva Tarea\" />\n            <button onClick={handleTodoAdd}>âž•</button>\n            <button onClick={handleClearAll}>ðŸ—‘</button>\n            {remainingTasksText()}\n        </>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}